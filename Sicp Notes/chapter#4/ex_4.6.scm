(define (eval exp env)
(cond ((self-evaluating? exp) exp)
((variable? exp) (lookup-variable-value exp env))
((quoted? exp) (text-of-quotation exp))
((assignment? exp) (eval-assignment exp env))
((definition? exp) (eval-definition exp env))
((if? exp) (eval-if exp env))
((lambda? exp) (make-procedure (lambda-parameters exp)
(lambda-body exp)
env))
((let? exp) (eval-let exp env) )
((begin? exp)
(eval-sequence (begin-actions exp) env))
((cond? exp) (if (eq? cadr '=>) 
    (eval (cond-special->if exp) env)
    (eval (cond->if exp) env)))
((application? exp)
(apply (eval (operator exp) env)
(list-of-values (operands exp) env)))
(else
(error "Unknown expression type: EVAL" exp))))

(define (let? exp )(tagged-list? exp 'let))

(define (eval-let exp  env)
     (define vals (map cadr (cadr exp)))
    (define parameters (map car  (cadr exp)))
    (define body (cddr exp))
  (apply (eval (make-lambda parameters body) env) (list-of-values vals env)))
